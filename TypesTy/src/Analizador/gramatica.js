/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,27],$V3=[1,26],$V4=[1,25],$V5=[1,20],$V6=[1,24],$V7=[1,23],$V8=[1,22],$V9=[1,21],$Va=[1,18],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[5,20,21,22,29,30,32,33,34,35,38,43,44,45,48,49,50,51,52,53],$Vh=[1,47],$Vi=[1,45],$Vj=[1,46],$Vk=[1,44],$Vl=[1,66],$Vm=[1,63],$Vn=[1,57],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,64],$Vu=[1,65],$Vv=[9,25],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[1,94],$VK=[1,95],$VL=[9,25,31,32,37,60,61,62,63,64,65,67,68,69,70,71,72,73,74,75],$VM=[25,37],$VN=[9,25,31,32,37,64,65,75],$VO=[9,25,31,32,37,60,61,64,65,69,70,71,72,73,74,75],$VP=[9,25,31,32,37,60,61,62,63,64,65,68,69,70,71,72,73,74,75],$VQ=[9,25,31,32,37,64,65,69,70,71,72,73,74,75],$VR=[1,168],$VS=[29,30,32];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declaracion":8,"PYC":9,"asignacion":10,"Sif":11,"Swhile":12,"SDoWhile":13,"actualizar":14,"metodo":15,"llamaMetodo":16,"Sexec":17,"Sfor":18,"Sswitch":19,"BREAK":20,"CONTINUE":21,"SWITCH":22,"PARA":23,"expresion":24,"PARC":25,"LLAVEA":26,"listaCases":27,"def":28,"LLAVEC":29,"CASE":30,"DOSP":31,"DEFAULT":32,"FOR":33,"EXEC":34,"ID":35,"parametrosLlamda":36,"COMA":37,"VOID":38,"parametros":39,"tipo":40,"INCRE":41,"DECRE":42,"DO":43,"WHILE":44,"IF":45,"RELSE":46,"IGUAL":47,"PRINT":48,"INT":49,"DOUBLE":50,"CHAR":51,"STRING":52,"BOOLEAN":53,"DECIMAL":54,"ENTERO":55,"CADENA":56,"CARACTER":57,"TRUE":58,"FALSE":59,"MAS":60,"MENOS":61,"MULTI":62,"DIV":63,"AND":64,"OR":65,"NOT":66,"POTENCIA":67,"MOD":68,"MENORQ":69,"MENORIGUAL":70,"MAYORQ":71,"MAYORIGUAL":72,"DIFERENTE":73,"COMPARAR":74,"INTERRC":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PYC",20:"BREAK",21:"CONTINUE",22:"SWITCH",23:"PARA",25:"PARC",26:"LLAVEA",29:"LLAVEC",30:"CASE",31:"DOSP",32:"DEFAULT",33:"FOR",34:"EXEC",35:"ID",37:"COMA",38:"VOID",41:"INCRE",42:"DECRE",43:"DO",44:"WHILE",45:"IF",46:"RELSE",47:"IGUAL",48:"PRINT",49:"INT",50:"DOUBLE",51:"CHAR",52:"STRING",53:"BOOLEAN",54:"DECIMAL",55:"ENTERO",56:"CADENA",57:"CARACTER",58:"TRUE",59:"FALSE",60:"MAS",61:"MENOS",62:"MULTI",63:"DIV",64:"AND",65:"OR",66:"NOT",67:"POTENCIA",68:"MOD",69:"MENORQ",70:"MENORIGUAL",71:"MAYORQ",72:"MAYORIGUAL",73:"DIFERENTE",74:"COMPARAR",75:"INTERRC"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[19,8],[19,7],[19,8],[27,5],[27,4],[28,3],[18,11],[18,11],[18,11],[17,2],[16,4],[16,3],[36,3],[36,1],[15,7],[15,8],[39,4],[39,2],[14,2],[14,2],[13,9],[12,7],[11,7],[11,9],[11,11],[10,3],[7,5],[8,2],[8,4],[40,1],[40,1],[40,1],[40,1],[40,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,5],[24,2],[24,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 31:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 7: case 8: case 9: case 11: case 14: case 15:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 10: case 12: case 13:
 this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = new detener.default(); 
break;
case 17:
 this.$ = new continuar.default(); 
break;
case 24:
 this.$ = new For.default($$[$0-8],null,$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 25: case 26:
 this.$ = new For.default(null,$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column); 
break;
case 27:
 this.$ = new execito.default($$[$0],_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 28:
 this.$ = new llamadita.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].last_column,$$[$0-1]); 
break;
case 29:
 this.$ = new llamadita.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column,[]); 
break;
case 30:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 32:
 this.$ = new metodo.default(3, new tipo.default('VOID'), $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 33:
 this.$ = new metodo.default(3, new tipo.default('VOID'), $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line,_$[$0-7].last_column); 
break;
case 34:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6,$$[$0-1],$$[$0],null)); 
break;
case 35:
 this.$ = new Array(); this.$.push(new simbolo.default(6,$$[$0-1],$$[$0],null)); 
break;
case 36:
 this.$ = new asigna.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 37:
 this.$ = new asigna.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 38:
 this.$ = new DoWhile.default($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].last_column); 
break;
case 39:
 this.$ = new While.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 40:
 this.$ = new If.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 41:
 this.$ = new If.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 42:
 this.$ = new If.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 43:
 this.$ = new asigna.default($$[$0-2], $$[$0] ,_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 44:
 this.$ = new Print.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].last_column);
break;
case 45:
 
                                if($$[$0-1].type == 0){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default(0, _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 1){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default(0.0, _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 2){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default(true, _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 3){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default('\0', _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 4){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default("", _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }
                            
break;
case 46:
 this.$ = new declara.default($$[$0-3], new simbolo.default(1,null,$$[$0-2],$$[$0]), _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 47:
 this.$ = new tipo.default('ENTERO'); 
break;
case 48:
 this.$ = new tipo.default('DECIMAL'); 
break;
case 49:
 this.$ = new tipo.default('CARACTER'); 
break;
case 50:
 this.$ = new tipo.default('CADENA'); 
break;
case 51:
 this.$ = new tipo.default('BOOLEANO'); 
break;
case 52: case 53:
 this.$ = new primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].last_column); 
break;
case 54: case 55:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 56:
 this.$ = new primitivo.default(true, _$[$0].first_line, _$[$0].last_column); 
break;
case 57:
 this.$ = new primitivo.default(false, _$[$0].first_line, _$[$0].last_column); 
break;
case 58:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 59:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 60:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 61:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 62:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 63:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', $$[$0], _$[$0-1].first_line, _$[$0-1].last_column, true); 
break;
case 64:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 65:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 66:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column, true); 
break;
case 67:
 this.$= $$[$0-1]; 
break;
case 68:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 69:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 70:
 this.$ = new relacional.default($$[$0-2],'<',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 71:
 this.$ = new relacional.default($$[$0-2],'<=',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 72:
 this.$ = new relacional.default($$[$0-2],'>',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 73:
 this.$ = new relacional.default($$[$0-2],'>=',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 74:
 this.$ = new relacional.default($$[$0-2],'!=',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 75:
 this.$ = new relacional.default($$[$0-2],'==',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 76:
 this.$ = new ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column); 
break;
case 77:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 78:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{1:[3]},{5:[1,33],6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{9:[1,35]},{9:[1,36]},o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),{9:[1,37]},o($Vg,[2,11]),{9:[1,38]},{9:[1,39]},o($Vg,[2,14]),o($Vg,[2,15]),{9:[1,40]},{9:[1,41]},{23:[1,42]},{35:[1,43]},{23:$Vh,41:$Vi,42:$Vj,47:$Vk},{23:[1,48]},{23:[1,49]},{26:[1,50]},{35:[1,51]},{16:52,35:[1,53]},{23:[1,54]},{23:[1,55]},{35:[2,47]},{35:[2,48]},{35:[2,49]},{35:[2,50]},{35:[2,51]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,10]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,16]),o($Vg,[2,17]),{23:$Vl,24:56,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{9:[2,45],47:[1,67]},{23:$Vl,24:68,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},o($Vv,[2,36]),o($Vv,[2,37]),{23:$Vl,24:71,25:[1,70],35:$Vm,36:69,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:72,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:73,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{4:74,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{23:[1,75]},{9:[2,27]},{23:$Vh},{8:76,10:77,35:[1,78],40:19,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{23:$Vl,24:79,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{25:[1,80],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},o($VL,[2,52]),o($VL,[2,53]),o($VL,[2,54]),o($VL,[2,55]),o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,58],{41:[1,96],42:[1,97]}),{23:$Vl,24:98,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:99,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:100,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:101,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},o($Vv,[2,43],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),{25:[1,102],37:[1,103]},{9:[2,29]},o($VM,[2,31],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),{25:[1,104],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{25:[1,105],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,106],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{25:[1,107],39:108,40:109,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{9:[1,110]},{9:[1,111]},{47:$Vk},{25:[1,112],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{9:[1,113]},{23:$Vl,24:114,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:115,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:116,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:117,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:118,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:119,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:120,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:121,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:122,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:123,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:124,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:125,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:126,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:127,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:128,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,63]),o($VN,[2,66],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),{25:[1,129],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{9:[2,46],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{9:[2,28]},{23:$Vl,24:130,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{26:[1,131]},{26:[1,132]},{44:[1,133]},{26:[1,134]},{25:[1,135],37:[1,136]},{35:[1,137]},{23:$Vl,24:138,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:139,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{26:[1,140]},o($Vg,[2,44]),o($VO,[2,59],{62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VO,[2,60],{62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VP,[2,61],{67:$VC}),o($VP,[2,62],{67:$VC}),o($VN,[2,64],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o([9,25,31,32,37,65,75],[2,65],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($VP,[2,68]),o($VP,[2,69],{67:$VC}),o($VQ,[2,70],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VQ,[2,71],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VQ,[2,72],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VQ,[2,73],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VQ,[2,74],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD}),o($VQ,[2,75],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,67:$VC,68:$VD}),{31:[1,141],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},o($VL,[2,67]),o($VM,[2,30],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK}),{4:142,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{4:143,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{23:[1,144]},{4:145,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{26:[1,146]},{40:147,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($VM,[2,35]),{9:[1,148],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{9:[1,149],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{23:$Vl,24:151,27:150,30:[1,152],35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{23:$Vl,24:153,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,154],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,155],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{23:$Vl,24:156,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,157],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{4:158,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{35:[1,159]},{14:160,35:[1,161]},{10:163,14:162,35:[1,164]},{28:165,29:[1,166],30:[1,167],32:$VR},{28:169,32:$VR,60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{23:$Vl,24:170,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},o([9,25,31,32,37,75],[2,76],{60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ}),o($Vg,[2,40],{46:[1,171]}),o($Vg,[2,39]),{25:[1,172],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},o($Vg,[2,32]),{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,173],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($VM,[2,34]),{25:[1,174]},{41:$Vi,42:$Vj},{25:[1,175]},{25:[1,176]},{41:$Vi,42:$Vj,47:$Vk},{29:[1,177]},o($Vg,[2,19]),{23:$Vl,24:178,35:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,58:$Vr,59:$Vs,61:$Vt,66:$Vu},{31:[1,179]},{29:[1,180]},{31:[1,181],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{11:182,26:[1,183],45:$V9},{9:[1,184]},o($Vg,[2,33]),{26:[1,185]},{26:[1,186]},{26:[1,187]},o($Vg,[2,18]),{31:[1,188],60:$Vw,61:$Vx,62:$Vy,63:$Vz,64:$VA,65:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK},{4:189,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($Vg,[2,20]),{4:190,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($Vg,[2,41]),{4:191,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($Vg,[2,38]),{4:192,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{4:193,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{4:194,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{4:195,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[2,23],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($VS,[2,22],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,40:19,6:34,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf}),{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,196],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,197],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,198],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},{6:34,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V0,21:$V1,22:$V2,29:[1,199],33:$V3,34:$V4,35:$V5,38:$V6,40:19,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf},o($VS,[2,21],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,40:19,6:34,20:$V0,21:$V1,22:$V2,33:$V3,34:$V4,35:$V5,38:$V6,43:$V7,44:$V8,45:$V9,48:$Va,49:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf}),o($Vg,[2,42]),o($Vg,[2,24]),o($Vg,[2,25]),o($Vg,[2,26])],
defaultActions: {28:[2,47],29:[2,48],30:[2,49],31:[2,50],32:[2,51],33:[2,1],52:[2,27],70:[2,29],102:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const Print = require('src/Clases/Instrucciones/Print');
    const primitivo = require('src/Clases/Expresiones/Primitivo');
    const identificador = require('src/Clases/Expresiones/Identificador');
    const ast = require('src/Clases/Ast/Ast');
    const declara = require('src/Clases/Instrucciones/Declaracion');
    const tipo = require('src/Clases/TablaSimbolos/Tipo');
    const simbolo = require('src/Clases/TablaSimbolos/Simbolos');
    const asigna = require('src/Clases/Instrucciones/Asignacion');
    const aritmetica = require('src/Clases/Expresiones/Aritmetica');
    const logica = require('src/Clases/Expresiones/Logica');
    const relacional = require('src/Clases/Expresiones/Relacional');
    const ternario = require('src/Clases/Expresiones/Ternario');
    const If = require('src/Clases/Instrucciones/SentenciaDeControl/If');
    const While = require('src/Clases/Instrucciones/SentenciaCiclica/While');
    const DoWhile = require('src/Clases/Instrucciones/SentenciaCiclica/DoWhile');
    const metodo = require('src/Clases/Instrucciones/Metodo');
    const llamadita = require('src/Clases/Instrucciones/Llamada');
    const execito = require('src/Clases/Instrucciones/Exec');
    const For = require('src/Clases/Instrucciones/SentenciaCiclica/For');
    const detener = require('src/Clases/Instrucciones/SentenciaTransferencia/Detener');
    const continuar = require('src/Clases/Instrucciones/SentenciaTransferencia/Continuar');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 'CORA'
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 'CORC'
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 9
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 74
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 72
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 67
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 29
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 'LIST'
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 'NEW'
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 'EJECUTAR'
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 58:/* skip whitespace */
break;
case 59:return 5
break;
case 60:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:ejecutar\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:([0-9]+))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(([a-zA-ZÑñ]+)(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}