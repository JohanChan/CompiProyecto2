/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,16],$V2=[1,17],$V3=[1,18],$V4=[1,29],$V5=[1,28],$V6=[1,27],$V7=[1,22],$V8=[1,26],$V9=[1,25],$Va=[1,24],$Vb=[1,23],$Vc=[1,20],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[2,5,20,21,22,24,30,32,34,35,36,37,40,45,46,47,50,51,52,53,54,55],$Vj=[1,55],$Vk=[1,52],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,53],$Vs=[1,54],$Vt=[1,62],$Vu=[1,60],$Vv=[1,61],$Vw=[1,59],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[9,26,33,39,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77],$VN=[2,50],$VO=[1,93],$VP=[9,26],$VQ=[9,26,33,39,66,67,77],$VR=[26,39],$VS=[9,26,33,39,62,63,66,67,71,72,73,74,75,76,77],$VT=[9,26,33,39,62,63,64,65,66,67,70,71,72,73,74,75,76,77],$VU=[9,26,33,39,66,67,71,72,73,74,75,76,77],$VV=[1,144],$VW=[30,32,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"print":7,"declaracion":8,"PYC":9,"asignacion":10,"Sif":11,"Swhile":12,"SDoWhile":13,"actualizar":14,"metodo":15,"llamaMetodo":16,"Sexec":17,"Sfor":18,"Sswitch":19,"BREAK":20,"CONTINUE":21,"RETURN":22,"expresion":23,"SWITCH":24,"PARA":25,"PARC":26,"LLAVEA":27,"listaCases":28,"defa":29,"LLAVEC":30,"def":31,"CASE":32,"DOSP":33,"DEFAULT":34,"FOR":35,"EXEC":36,"ID":37,"parametrosLlamda":38,"COMA":39,"VOID":40,"parametros":41,"tipo":42,"INCRE":43,"DECRE":44,"DO":45,"WHILE":46,"IF":47,"RELSE":48,"IGUAL":49,"PRINT":50,"INT":51,"DOUBLE":52,"CHAR":53,"STRING":54,"BOOLEAN":55,"DECIMAL":56,"ENTERO":57,"CADENA":58,"CARACTER":59,"TRUE":60,"FALSE":61,"MAS":62,"MENOS":63,"MULTI":64,"DIV":65,"AND":66,"OR":67,"NOT":68,"POTENCIA":69,"MOD":70,"MENORQ":71,"MENORIGUAL":72,"MAYORQ":73,"MAYORIGUAL":74,"DIFERENTE":75,"COMPARAR":76,"INTERRC":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PYC",20:"BREAK",21:"CONTINUE",22:"RETURN",24:"SWITCH",25:"PARA",26:"PARC",27:"LLAVEA",30:"LLAVEC",31:"def",32:"CASE",33:"DOSP",34:"DEFAULT",35:"FOR",36:"EXEC",37:"ID",39:"COMA",40:"VOID",43:"INCRE",44:"DECRE",45:"DO",46:"WHILE",47:"IF",48:"RELSE",49:"IGUAL",50:"PRINT",51:"INT",52:"DOUBLE",53:"CHAR",54:"STRING",55:"BOOLEAN",56:"DECIMAL",57:"ENTERO",58:"CADENA",59:"CARACTER",60:"TRUE",61:"FALSE",62:"MAS",63:"MENOS",64:"MULTI",65:"DIV",66:"AND",67:"OR",68:"NOT",69:"POTENCIA",70:"MOD",71:"MENORQ",72:"MENORIGUAL",73:"MAYORQ",74:"MAYORIGUAL",75:"DIFERENTE",76:"COMPARAR",77:"INTERRC"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[6,3],[6,1],[19,8],[19,7],[19,7],[28,5],[28,4],[29,3],[18,11],[18,11],[18,11],[17,2],[16,4],[16,3],[38,3],[38,1],[15,7],[15,8],[15,7],[15,8],[41,4],[41,2],[14,2],[14,2],[13,9],[12,7],[11,7],[11,9],[11,11],[10,3],[7,5],[8,2],[8,4],[42,1],[42,1],[42,1],[42,1],[42,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,5],[23,2],[23,2],[23,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$; 
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 34:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4: case 7: case 8: case 9: case 11: case 14: case 15: case 26: case 84:
 this.$ = $$[$0]; 
break;
case 5: case 6: case 10: case 12: case 13:
 this.$ = $$[$0-1]; 
break;
case 16:
 this.$ = new detener.default(); 
break;
case 17:
 this.$ = new continuar.default(); 
break;
case 18:
 this.$ = new retornar.default(null); 
break;
case 19:
 this.$ = new retornar.default($$[$0-1]); 
break;
case 20:
 console.log("Error Sintactico" + yytext 
                                    + "linea: " + this._$.first_line 
                                    + "columna: " + this._$.first_column); 
                            
break;
case 21:
 this.$ = new swish.default($$[$0-5],$$[$0-2],$$[$0-1]); 
break;
case 22:
 this.$ = new swish.default($$[$0-4],$$[$0-1],null); 
break;
case 23:
 this.$ = new swish.default($$[$0-4],null,$$[$0]); 
break;
case 24:
 this.$ = $$[$0-4]; this.$.push( new casito.default($$[$0-2],$$[$0])); 
break;
case 25:
 this.$ = new Array(); this.$.push( new casito.default($$[$0-2],$$[$0])); 
break;
case 27:
 this.$ = new For.default($$[$0-8],null,$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column);
break;
case 28: case 29:
 this.$ = new For.default(null,$$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].last_column); 
break;
case 30:
 this.$ = new execito.default($$[$0],_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 31:
 this.$ = new llamadita.default($$[$0-3],_$[$0-3].first_line,_$[$0-3].last_column,$$[$0-1]); 
break;
case 32:
 this.$ = new llamadita.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].last_column,[]); 
break;
case 33:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 35:
 this.$ = new metodo.default(3, new tipo.default('VOID'), $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 36:
 this.$ = new metodo.default(3, new tipo.default('VOID'), $$[$0-6], $$[$0-4], true, $$[$0-1], _$[$0-7].first_line,_$[$0-7].last_column); 
break;
case 37:
 this.$ = new metodo.default(3, $$[$0-6], $$[$0-5], [], true, $$[$0-1], _$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 38:
 console.log($$[$0-4]); this.$ = new metodo.default(3, $$[$0-7], $$[$0-6], $$[$0-4], true, $$[$0-2], _$[$0-7].first_line,_$[$0-7].last_column); 
break;
case 39:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6,$$[$0-1],$$[$0],null)); 
break;
case 40:
 this.$ = new Array(); this.$.push(new simbolo.default(6,$$[$0-1],$$[$0],null)); 
break;
case 41:
 this.$ = new asigna.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 42:
 this.$ = new asigna.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line,_$[$0-1].last_column); 
break;
case 43:
 this.$ = new DoWhile.default($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].last_column); 
break;
case 44:
 this.$ = new While.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].last_column); 
break;
case 45:
 this.$ = new If.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 46:
 this.$ = new If.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 47:
 this.$ = new If.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 48:
 this.$ = new asigna.default($$[$0-2], $$[$0] ,_$[$0-2].first_line,_$[$0-2].last_column); 
break;
case 49:
 this.$ = new Print.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].last_column);
break;
case 50:
 
                                if($$[$0-1].type == 0){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default(0, _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 1){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default(0.0, _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 2){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default(true, _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 3){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default('\0', _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }else if($$[$0-1].type == 4){
                                    this.$ = new declara.default($$[$0-1], new simbolo.default(1,null,$$[$0],new primitivo.default("", _$[$0-1].first_line, _$[$0-1].last_column)), _$[$0-1].first_line, _$[$0-1].last_column); 
                                }
                            
break;
case 51:
 this.$ = new declara.default($$[$0-3], new simbolo.default(1,null,$$[$0-2],$$[$0]), _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 52:
 this.$ = new tipo.default('ENTERO'); 
break;
case 53:
 this.$ = new tipo.default('DECIMAL'); 
break;
case 54:
 this.$ = new tipo.default('CARACTER'); 
break;
case 55:
 this.$ = new tipo.default('CADENA'); 
break;
case 56:
 this.$ = new tipo.default('BOOLEANO'); 
break;
case 57: case 58:
 this.$ = new primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].last_column); 
break;
case 59: case 60:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 61:
 this.$ = new primitivo.default(true, _$[$0].first_line, _$[$0].last_column); 
break;
case 62:
 this.$ = new primitivo.default(false, _$[$0].first_line, _$[$0].last_column); 
break;
case 63:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 64:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 65:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 66:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 67:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 68:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', $$[$0], _$[$0-1].first_line, _$[$0-1].last_column, true); 
break;
case 69:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 70:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 71:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column, true); 
break;
case 72:
 this.$= $$[$0-1]; 
break;
case 73:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 74:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 75:
 this.$ = new relacional.default($$[$0-2],'<',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 76:
 this.$ = new relacional.default($$[$0-2],'<=',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 77:
 this.$ = new relacional.default($$[$0-2],'>',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 78:
 this.$ = new relacional.default($$[$0-2],'>=',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 79:
 this.$ = new relacional.default($$[$0-2],'!=',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 80:
 this.$ = new relacional.default($$[$0-2],'==',$$[$0],_$[$0-2].first_line, _$[$0-2].last_column, false); 
break;
case 81:
 this.$ = new ternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].last_column); 
break;
case 82:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'+', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 83:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].last_column),'-', new primitivo.default(1,_$[$0-1].first_line,_$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{9:[1,37]},{9:[1,38]},o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),{9:[1,39]},o($Vi,[2,11]),{9:[1,40]},{9:[1,41]},o($Vi,[2,14]),o($Vi,[2,15]),{9:[1,42]},{9:[1,43]},{9:[1,44],16:56,23:45,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($Vi,[2,20]),{25:[1,57]},{37:[1,58]},{25:$Vt,43:$Vu,44:$Vv,49:$Vw},{25:[1,63]},{25:[1,64]},{27:[1,65]},{37:[1,66]},{16:67,37:[1,68]},{25:[1,69]},{25:[1,70]},{37:[2,52]},{37:[2,53]},{37:[2,54]},{37:[2,55]},{37:[2,56]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,10]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),{9:[1,71],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},o($VM,[2,57]),o($VM,[2,58]),o($VM,[2,59]),o($VM,[2,60]),o($VM,[2,61]),o($VM,[2,62]),o($VM,[2,63],{25:$Vt,43:[1,87],44:[1,88]}),{16:56,23:89,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:90,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:91,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($VM,[2,84]),{16:56,23:92,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{9:$VN,25:[1,94],49:$VO},{16:56,23:95,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($VP,[2,41]),o($VP,[2,42]),{16:56,23:98,25:$Vj,26:[1,97],37:$Vk,38:96,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:99,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:100,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{2:$V0,4:101,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{25:[1,102]},{9:[2,30]},{25:$Vt},{8:103,10:104,37:[1,106],42:105,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{16:56,23:107,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($Vi,[2,19]),{16:56,23:108,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:109,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:110,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:111,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:112,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:113,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:114,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:115,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:116,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:117,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:118,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:119,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:120,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:121,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:122,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($VM,[2,82]),o($VM,[2,83]),o($VM,[2,68]),o($VQ,[2,71],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),{26:[1,123],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{26:[1,124],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{16:56,23:125,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{26:[1,126],41:127,42:128,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VP,[2,48],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),{26:[1,129],39:[1,130]},o($VM,[2,32]),o($VR,[2,34],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),{26:[1,131],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{26:[1,132],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,133],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{26:[1,134],41:135,42:128,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{9:[1,136]},{9:[1,137]},{37:[1,138]},{49:$Vw},{26:[1,139],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},o($VS,[2,64],{64:$Vz,65:$VA,69:$VD,70:$VE}),o($VS,[2,65],{64:$Vz,65:$VA,69:$VD,70:$VE}),o($VT,[2,66],{69:$VD}),o($VT,[2,67],{69:$VD}),o($VQ,[2,69],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o([9,26,33,39,67,77],[2,70],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),o($VT,[2,73]),o($VT,[2,74],{69:$VD}),o($VU,[2,75],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE}),o($VU,[2,76],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE}),o($VU,[2,77],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE}),o($VU,[2,78],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE}),o($VU,[2,79],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE}),o($VU,[2,80],{62:$Vx,63:$Vy,64:$Vz,65:$VA,69:$VD,70:$VE}),{33:[1,140],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},o($VM,[2,72]),{9:[1,141]},{9:[2,51],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{27:[1,142]},{26:[1,143],39:$VV},{37:[1,145]},o($VM,[2,31]),{16:56,23:146,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{27:[1,147]},{27:[1,148]},{46:[1,149]},{27:[1,150]},{26:[1,151],39:$VV},{16:56,23:152,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{16:56,23:153,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{9:$VN,49:$VO},{27:[1,154]},{16:56,23:155,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($Vi,[2,49]),{2:$V0,4:156,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{27:[1,157]},{42:158,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VR,[2,40]),o($VR,[2,33],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),{2:$V0,4:159,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:160,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{25:[1,161]},{2:$V0,4:162,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{27:[1,163]},{9:[1,164],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{9:[1,165],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{28:166,31:[1,167],32:[1,168]},o([9,26,33,39,77],[2,81],{62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK}),{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,169],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:170,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{37:[1,171]},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,172],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,173],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{16:56,23:174,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,175],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:176,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{14:177,37:[1,178]},{10:180,14:179,37:[1,181]},{29:182,30:[1,183],32:[1,184],34:[1,185]},{30:[1,186]},{16:56,23:187,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},o($Vi,[2,37]),{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,188],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VR,[2,39]),o($Vi,[2,45],{48:[1,189]}),o($Vi,[2,44]),{26:[1,190],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},o($Vi,[2,35]),{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,191],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{26:[1,192]},{43:$Vu,44:$Vv},{26:[1,193]},{26:[1,194]},{43:$Vu,44:$Vv,49:$Vw},{30:[1,195]},o($Vi,[2,22]),{16:56,23:196,25:$Vj,37:$Vk,56:$Vl,57:$Vm,58:$Vn,59:$Vo,60:$Vp,61:$Vq,63:$Vr,68:$Vs},{33:[1,197]},o($Vi,[2,23]),{33:[1,198],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},o($Vi,[2,38]),{11:199,27:[1,200],47:$Vb},{9:[1,201]},o($Vi,[2,36]),{27:[1,202]},{27:[1,203]},{27:[1,204]},o($Vi,[2,21]),{33:[1,205],62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,69:$VD,70:$VE,71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL},{2:$V0,4:206,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:207,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,46]),{2:$V0,4:208,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($Vi,[2,43]),{2:$V0,4:209,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:210,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:211,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,4:212,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[2,26],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VW,[2,25],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,42:21,6:36,2:$V0,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh}),{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,213],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,214],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,215],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},{2:$V0,6:36,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:$V2,22:$V3,24:$V4,30:[1,216],35:$V5,36:$V6,37:$V7,40:$V8,42:21,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh},o($VW,[2,24],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,42:21,6:36,2:$V0,20:$V1,21:$V2,22:$V3,24:$V4,35:$V5,36:$V6,37:$V7,40:$V8,45:$V9,46:$Va,47:$Vb,50:$Vc,51:$Vd,52:$Ve,53:$Vf,54:$Vg,55:$Vh}),o($Vi,[2,47]),o($Vi,[2,27]),o($Vi,[2,28]),o($Vi,[2,29])],
defaultActions: {30:[2,52],31:[2,53],32:[2,54],33:[2,55],34:[2,56],35:[2,1],67:[2,30]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const Print = require('src/Clases/Instrucciones/Print');
    const primitivo = require('src/Clases/Expresiones/Primitivo');
    const identificador = require('src/Clases/Expresiones/Identificador');
    const ast = require('src/Clases/Ast/Ast');
    const declara = require('src/Clases/Instrucciones/Declaracion');
    const tipo = require('src/Clases/TablaSimbolos/Tipo');
    const simbolo = require('src/Clases/TablaSimbolos/Simbolos');
    const asigna = require('src/Clases/Instrucciones/Asignacion');
    const aritmetica = require('src/Clases/Expresiones/Aritmetica');
    const logica = require('src/Clases/Expresiones/Logica');
    const relacional = require('src/Clases/Expresiones/Relacional');
    const ternario = require('src/Clases/Expresiones/Ternario');
    const If = require('src/Clases/Instrucciones/SentenciaDeControl/If');
    const While = require('src/Clases/Instrucciones/SentenciaCiclica/While');
    const DoWhile = require('src/Clases/Instrucciones/SentenciaCiclica/DoWhile');
    const metodo = require('src/Clases/Instrucciones/Metodo');
    const llamadita = require('src/Clases/Instrucciones/Llamada');
    const execito = require('src/Clases/Instrucciones/Exec');
    const For = require('src/Clases/Instrucciones/SentenciaCiclica/For');
    const detener = require('src/Clases/Instrucciones/SentenciaTransferencia/Detener');
    const continuar = require('src/Clases/Instrucciones/SentenciaTransferencia/Continuar');
    const retornar = require('src/Clases/Instrucciones/SentenciaTransferencia/Retornar');
    const casito = require('src/Clases/Instrucciones/SentenciaDeControl/Case');
    const swish = require('src/Clases/Instrucciones/SentenciaDeControl/Switch');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 65
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 44
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 63
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 25
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 26
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 'CORA'
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 'CORC'
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 9
break;
case 13: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 14: console.log("Reconocio : "+ yy_.yytext); return 76
break;
case 15: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 16: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 17: console.log("Reconocio : "+ yy_.yytext); return 72
break;
case 18: console.log("Reconocio : "+ yy_.yytext); return 74
break;
case 19: console.log("Reconocio : "+ yy_.yytext); return 71
break;
case 20: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 21: console.log("Reconocio : "+ yy_.yytext); return 67
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 66
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 68
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 33
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 69
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 70
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 27
break;
case 29: console.log("Reconocio : "+ yy_.yytext); return 30
break;
case 30: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 31: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 32: console.log("Reconocio : "+ yy_.yytext); return 55
break;
case 33: console.log("Reconocio : "+ yy_.yytext); return 53
break;
case 34: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 35: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 36: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 37: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 38: console.log("Reconocio : "+ yy_.yytext); return 'LIST'
break;
case 39: console.log("Reconocio : "+ yy_.yytext); return 'NEW'
break;
case 40: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 41: console.log("Reconocio : "+ yy_.yytext); return 61
break;
case 42: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 43: console.log("Reconocio : "+ yy_.yytext); return 'EJECUTAR'
break;
case 44: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 45: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 46: console.log("Reconocio : "+ yy_.yytext); return 35
break;
case 47: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 48: console.log("Reconocio : "+ yy_.yytext); return 36
break;
case 49: console.log("Reconocio : "+ yy_.yytext); return 34
break;
case 50: console.log("Reconocio : "+ yy_.yytext); return 32
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 22
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 57
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 37
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 59:/* skip whitespace */
break;
case 60:return 5
break;
case 61:return 'ERROR'
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?::)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:print\b)/i,/^(?:ejecutar\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:void\b)/i,/^(?:exec\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:([0-9]+(\.[0-9]+)?\b))/i,/^(?:([0-9]+))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]+))*")))/i,/^(?:(([a-zA-ZÑñ]+)(([a-zA-ZÑñ]+)|([0-9]+)|_)*))/i,/^(?:(('((\\([\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}